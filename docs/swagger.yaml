basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  main.Chat:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/main.User'
        type: array
    type: object
  main.ErrorGet:
    properties:
      errorMessage:
        type: string
    type: object
  main.ListMessagesRequest:
    properties:
      receiverID:
        type: integer
    type: object
  main.LoginPost:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  main.Message:
    properties:
      chatID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      message:
        type: string
      senderID:
        type: integer
      updatedAt:
        type: string
    type: object
  main.MessagePost:
    properties:
      message:
        type: string
      receiverID:
        type: integer
    type: object
  main.RegisterPost:
    properties:
      confirmPassword:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  main.SearchRequest:
    properties:
      prompt:
        type: string
    type: object
  main.TokenResponse:
    properties:
      token:
        type: string
    type: object
  main.User:
    properties:
      chats:
        items:
          $ref: '#/definitions/main.Chat'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  main.UserGet:
    properties:
      currentUsersPage:
        type: boolean
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server.
  title: BBBAB Messenger
  version: "0.1"
paths:
  /listmessages:
    post:
      consumes:
      - application/json
      description: Get messages of chat with user
      operationId: list-messages
      parameters:
      - description: Auth Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Message Request
        in: body
        name: MessageData
        required: true
        schema:
          $ref: '#/definitions/main.ListMessagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Message'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorGet'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: List messages
  /login:
    post:
      consumes:
      - application/json
      description: Log into account
      operationId: login
      parameters:
      - description: Login data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/main.LoginPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorGet'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: Login
  /register:
    post:
      consumes:
      - application/json
      description: Register an account
      operationId: register
      parameters:
      - description: Register data
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/main.RegisterPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorGet'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: Register
  /sendmessage:
    post:
      consumes:
      - application/json
      description: Send message to selected chat
      operationId: send-message
      parameters:
      - description: Auth Token
        in: header
        name: Bearer
        required: true
        type: string
      - description: Message Data
        in: body
        name: MessageData
        required: true
        schema:
          $ref: '#/definitions/main.MessagePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorGet'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: Send message
  /user/{username}:
    get:
      description: Get user
      operationId: get-user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserGet'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: Get user
  /usersearch:
    post:
      consumes:
      - application/json
      description: Search for user
      operationId: user-search
      parameters:
      - description: Search Request
        in: body
        name: Prompt
        required: true
        schema:
          $ref: '#/definitions/main.SearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorGet'
      summary: Search for user
swagger: "2.0"
